diff --git a/android/lib/build-vosk.sh b/android/lib/build-vosk.sh
index c30f632..040c21c 100755
--- a/android/lib/build-vosk.sh
+++ b/android/lib/build-vosk.sh
@@ -42,8 +42,8 @@ case $arch in
           HOST=arm-linux-androideabi
           AR=llvm-ar
           RANLIB=llvm-ranlib
-          CC=armv7a-linux-androideabi21-clang
-          CXX=armv7a-linux-androideabi21-clang++
+          CC=armv7a-linux-androideabi23-clang
+          CXX=armv7a-linux-androideabi23-clang++
           ARCHFLAGS="-mfloat-abi=softfp -mfpu=neon"
           ;;
     arm64-v8a)
@@ -51,8 +51,8 @@ case $arch in
           HOST=aarch64-linux-android
           AR=llvm-ar
           RANLIB=llvm-ranlib
-          CC=aarch64-linux-android21-clang
-          CXX=aarch64-linux-android21-clang++
+          CC=aarch64-linux-android23-clang
+          CXX=aarch64-linux-android23-clang++
           ARCHFLAGS=""
           ;;
     x86_64)
@@ -60,8 +60,8 @@ case $arch in
           HOST=x86_64-linux-android
           AR=llvm-ar
           RANLIB=llvm-ranlib
-          CC=x86_64-linux-android21-clang
-          CXX=x86_64-linux-android21-clang++
+          CC=x86_64-linux-android23-clang
+          CXX=x86_64-linux-android23-clang++
           ARCHFLAGS=""
           ;;
     x86)
@@ -69,8 +69,8 @@ case $arch in
           HOST=i686-linux-android
           AR=llvm-ar
           RANLIB=llvm-ranlib
-          CC=i686-linux-android21-clang
-          CXX=i686-linux-android21-clang++
+          CC=i686-linux-android23-clang
+          CXX=i686-linux-android23-clang++
           ARCHFLAGS=""
           ;;
 esac
@@ -79,57 +79,57 @@ mkdir -p $WORKDIR/local/lib
 
 # openblas first
 cd $WORKDIR
-git clone -b v0.3.20 --single-branch https://github.com/xianyi/OpenBLAS
-make -C OpenBLAS TARGET=$BLAS_ARCH ONLY_CBLAS=1 AR=$AR CC=$CC HOSTCC=gcc ARM_SOFTFP_ABI=1 USE_THREAD=0 NUM_THREADS=1 -j 8
-make -C OpenBLAS install PREFIX=$WORKDIR/local
+git clone -b v0.3.20 --depth=1 https://github.com/xianyi/OpenBLAS
+make -C OpenBLAS TARGET=$BLAS_ARCH ONLY_CBLAS=1 AR=$AR CC=$CC HOSTCC=gcc ARM_SOFTFP_ABI=1 USE_THREAD=0 NUM_THREADS=1 NO_SHARED=1 -j$(nproc)
+make -C OpenBLAS install PREFIX=$WORKDIR/local NO_SHARED=1
 
 # CLAPACK
 cd $WORKDIR
-git clone -b v3.2.1  --single-branch https://github.com/alphacep/clapack
+git clone -b v3.2.1 --depth=1 https://github.com/alphacep/clapack
 mkdir -p clapack/BUILD && cd clapack/BUILD
-cmake -DCMAKE_C_FLAGS="$ARCHFLAGS" -DCMAKE_C_COMPILER_TARGET=$HOST \
+cmake -DCMAKE_C_FLAGS="$ARCHFLAGS -Wno-deprecated-non-prototype -Wno-shift-op-parentheses" -DCMAKE_C_COMPILER_TARGET=$HOST \
     -DCMAKE_C_COMPILER=$CC -DCMAKE_SYSTEM_NAME=Generic -DCMAKE_AR=$ANDROID_NDK_HOME/toolchains/llvm/prebuilt/${OS_NAME}-x86_64/bin/$AR \
     -DCMAKE_TRY_COMPILE_TARGET_TYPE=STATIC_LIBRARY \
     -DCMAKE_CROSSCOMPILING=True ..
-make -j 8 -C F2CLIBS/libf2c
-make -j 8 -C BLAS/SRC
-make -j 8 -C SRC
+make -j$(nproc) -C F2CLIBS/libf2c
+make -j$(nproc) -C BLAS/SRC
+make -j$(nproc) -C SRC
 find . -name "*.a" | xargs cp -t $WORKDIR/local/lib
 
 # tools directory --> we'll only compile OpenFST
 cd $WORKDIR
-git clone https://github.com/alphacep/openfst
+git clone --depth=1 https://github.com/alphacep/openfst
 cd openfst
 autoreconf -i
 CXX=$CXX CXXFLAGS="$ARCHFLAGS -O3 -DFST_NO_DYNAMIC_LINKING" ./configure --prefix=${WORKDIR}/local \
-    --enable-shared --enable-static --with-pic --disable-bin \
+    --disable-shared --enable-static --with-pic --disable-bin \
     --enable-lookahead-fsts --enable-ngram-fsts --host=$HOST --build=x86-linux-gnu
-make -j 8
+make -j$(nproc)
 make install
 
 # Kaldi itself
 cd $WORKDIR
-git clone -b vosk-android --single-branch https://github.com/alphacep/kaldi
+git clone -b vosk-android --depth=1 https://github.com/alphacep/kaldi
 cd $WORKDIR/kaldi/src
-CXX=$CXX AR=$AR RANLIB=$RANLIB CXXFLAGS="$ARCHFLAGS -O3 -DFST_NO_DYNAMIC_LINKING" ./configure --use-cuda=no \
-    --mathlib=OPENBLAS_CLAPACK --shared \
+CXX=$CXX AR=$AR RANLIB=$RANLIB CXXFLAGS="$ARCHFLAGS -O3 -DFST_NO_DYNAMIC_LINKING -Wno-unused-but-set-variable" ./configure --use-cuda=no \
+    --mathlib=OPENBLAS_CLAPACK --static \
     --android-incdir=${ANDROID_TOOLCHAIN_PATH}/sysroot/usr/include \
     --host=$HOST --openblas-root=${WORKDIR}/local \
     --fst-root=${WORKDIR}/local --fst-version=${OPENFST_VERSION}
-make -j 8 depend
+make -j$(nproc) depend
 cd $WORKDIR/kaldi/src
-make -j 8 online2 rnnlm
+make -j$(nproc) online2 rnnlm
 
 # Vosk-api
 cd $WORKDIR
 mkdir -p $WORKDIR/vosk
-make -j 8 -C ${WORKDIR_BASE}/../../../src \
+make -j$(nproc) -C ${WORKDIR_BASE}/../../../src \
     OUTDIR=$WORKDIR/vosk \
     KALDI_ROOT=${WORKDIR}/kaldi \
     OPENFST_ROOT=${WORKDIR}/local \
     OPENBLAS_ROOT=${WORKDIR}/local \
     CXX=$CXX \
     EXTRA_LDFLAGS="-llog -static-libstdc++ -Wl,-soname,libvosk.so"
-cp $WORKDIR/vosk/libvosk.so $WORKDIR/../../src/main/jniLibs/$arch/libvosk.so
+cp $WORKDIR/vosk/vosk-cli $WORKDIR/../../src/main/jniLibs/$arch/libvosk.so
 
 done
diff --git a/src/Makefile b/src/Makefile
index dc67217..ea67ba7 100644
--- a/src/Makefile
+++ b/src/Makefile
@@ -26,6 +26,9 @@ VOSK_SOURCES= \
 	vosk_api.cc \
 	postprocessor.cc
 
+VOSK_CLI_SOURCES= \
+	vosk-cli.cc
+
 VOSK_HEADERS= \
 	recognizer.h \
 	language_model.h \
@@ -104,11 +107,14 @@ ifeq ($(HAVE_CUDA), 1)
     LDFLAGS += -L$(CUDA_ROOT)/lib64 -lcuda -lcublas -lcusparse -lcudart -lcurand -lcufft -lcusolver -lnvToolsExt
 endif
 
-all: $(OUTDIR)/libvosk.$(EXT)
+all: $(OUTDIR)/libvosk.$(EXT) $(OUTDIR)/vosk-cli
 
 $(OUTDIR)/libvosk.$(EXT): $(VOSK_SOURCES:%.cc=$(OUTDIR)/%.o) $(LIBS)
 	$(CXX) --shared -s -o $@ $^ $(LDFLAGS) $(EXTRA_LDFLAGS)
 
+$(OUTDIR)/vosk-cli: $(VOSK_SOURCES:%.cc=$(OUTDIR)/%.o) $(VOSK_CLI_SOURCES:%.cc=$(OUTDIR)/%.o) $(LIBS)
+	$(CXX) -Oz -s -o $@ $^ -llog -static-libstdc++ -flto -Wl,--gc-sections
+
 $(OUTDIR)/%.o: %.cc $(VOSK_HEADERS)
 	$(CXX) $(CFLAGS) -c -o $@ $<
 
diff --git a/src/vosk-cli.cc b/src/vosk-cli.cc
new file mode 100644
index 0000000..bee1fa7
--- /dev/null
+++ b/src/vosk-cli.cc
@@ -0,0 +1,83 @@
+#include <iostream>
+#include <fstream>
+#include <string>
+#include <cstring>
+#include <vector>
+#include "vosk_api.h"
+
+void print_text_only(const char* json) {
+    const char* text_marker = "\"text\" : \"";
+    const char* text_start = strstr(json, text_marker);
+
+    if (text_start) {
+        text_start += strlen(text_marker);
+        const char* text_end = strchr(text_start, '"');
+
+        if (text_end) {
+            std::string text(text_start, text_end - text_start);
+            std::cout << text << std::endl;
+            return;
+        }
+    }
+    std::cout << json << std::endl;
+}
+
+int main(int argc, char* argv[]) {
+    if (argc != 3) {
+        std::cerr << "Usage: " << argv[0] << " model_path audio.wav" << std::endl;
+        return 1;
+    }
+
+    VoskModel* model = vosk_model_new(argv[1]);
+    if (!model) {
+        std::cerr << "Failed to create model" << std::endl;
+        return 1;
+    }
+
+    std::ifstream wavFile(argv[2], std::ios::binary);
+    if (!wavFile) {
+        std::cerr << "Failed to open file " << argv[2] << std::endl;
+        vosk_model_free(model);
+        return 1;
+    }
+
+    std::vector<unsigned char> header(44);
+    if (!wavFile.read(reinterpret_cast<char*>(header.data()), 44)) {
+        std::cerr << "Failed to read WAV header" << std::endl;
+        vosk_model_free(model);
+        return 1;
+    }
+
+    float sample_rate = static_cast<float>(
+        header[24] |
+        (header[25] << 8) |
+        (header[26] << 16) |
+        (header[27] << 24)
+    );
+
+    VoskRecognizer* recognizer = vosk_recognizer_new(model, sample_rate);
+    if (!recognizer) {
+        std::cerr << "Failed to create recognizer" << std::endl;
+        vosk_model_free(model);
+        return 1;
+    }
+
+    const size_t bufferSize = 3200;
+    std::vector<char> buffer(bufferSize);
+
+    while (wavFile) {
+        wavFile.read(buffer.data(), bufferSize);
+        size_t bytesRead = wavFile.gcount();
+        if (bytesRead == 0) break;
+
+        vosk_recognizer_accept_waveform(recognizer, buffer.data(), bytesRead);
+    }
+
+    const char* result = vosk_recognizer_final_result(recognizer);
+    print_text_only(result);
+
+    vosk_recognizer_free(recognizer);
+    vosk_model_free(model);
+
+    return 0;
+}
